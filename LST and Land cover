// helper function to extract the QA bits
function getQABits(image, start, end, newName) {
// Compute the bits we need to extract.

var pattern = 0;
for (var i = start; i <= end; i++) {
pattern += Math.pow(2, i);
}

// Return a single band image of the extracted QA bits, giving the band
// a new name.

return image.select([0], [newName])
.bitwiseAnd(pattern)
.rightShift(start);
}


function maskNDVI(image) {
// Select the QA band.
var QA = image.select('SummaryQA');
// Get the flags of the relevant bits (0-1)
var internalQuality = getQABits(QA, 0, 1, 'internal_quality_flag');
// Return an image with the mask only suitable areas (<=1)
return image.updateMask(internalQuality.lte(1));
}

function maskTE_day(image) {

// Select the QA band.

var QA = image.select('QC_Day');

// Get the 2 or 3 flags of the relevant bits (0-1)

var cloudscore = getQABits(QA, 0, 1, 'QC_score').expression("b(0) == 2 || b(0) == 3");

// Mask by the opposite of the above selection

return image.updateMask(cloudscore.not());

}

function maskTE_night(image) {

// Select the QA band.

var QA = image.select('QC_Night');

// Get the 2 or 3 flags of the relevant bits (0-1)

var cloudscore = getQABits(QA, 0, 1, 'QC_score').expression("b(0) == 2 || b(0) == 3");

// Mask by the opposite of the above selection

return image.updateMask(cloudscore.not());

}

// Function to scale to Kelvin and convert to Celsius, set image acquisition time.

function kelvin2celsius(image) {

return image

.multiply(0.02)

.subtract(273.15)

.copyProperties(image, ['system:time_start']);

}

// load London feature

var London = ee.FeatureCollection("FAO/GAUL_SIMPLIFIED_500m/2015/level2").filter(ee.Filter.eq('ADM2_NAME','Greater London'))

// visualise and zoom London boundary

var Cartagena_geom = ee.Geometry.Rectangle(-75.65,10.25,-75.35,10.55);
Map.addLayer(Cartagena_geom,'','Cartagena');
Map.setCenter(-75.5,10.35,11);

var startYear = 2002;

var endYear = 2019;

var years_list = ee.List.sequence(startYear, endYear, 1);

var year_filter = ee.Filter.calendarRange(startYear, endYear,'year');

var summer_filter = ee.Filter.calendarRange(6,8,'month');

// Load collections

var modNDVI = ee.ImageCollection("MODIS/006/MOD13A2")
.filter(ee.Filter.and(year_filter,summer_filter))
.filterBounds(Cartagena_geom)
.map(maskNDVI)
.select('NDVI');

var modLSTday = ee.ImageCollection('MODIS/006/MOD11A2')
.filter(ee.Filter.and(year_filter,summer_filter))
.filterBounds(Cartagena_geom)
.map(maskTE_day)
.select('LST_Day_1km');
Map.centerObject(Cartagena_geom,9);

var modLSTnight = ee.ImageCollection('MODIS/006/MOD11A2')

.filter(ee.Filter.and(year_filter,summer_filter))
.filterBounds(Cartagena_geom)
.map(maskTE_night)
.select('LST_Night_1km');

// Annual NDVI aggregation

var annual_modNDVI = years_list.map(function(year){
return modNDVI
.filter(ee.Filter.calendarRange(year,year,'year'))
.reduce(ee.Reducer.mean())
.set('system:index', ee.String(year))
.set('year', year);
});

// Convert the image List to an ImageCollection.

var annual_modNDVI_coll = ee.ImageCollection.fromImages(annual_modNDVI);

// Annual LST Day aggregation

// Return image in Celsius

var modLSTcday = modLSTday.map(kelvin2celsius);

// Map over the list of years to build a list of annual image composites.

var annual_modLSTcday = years_list.map(function(year) {
return modLSTcday
.filter(ee.Filter.calendarRange(year,year,'year'))
.reduce(ee.Reducer.mean())
.set('system:index', ee.String(year))
.set('year', year);
});

// Convert the image List to an ImageCollection.

var annual_modLSTcday_coll = ee.ImageCollection.fromImages(annual_modLSTcday);

// Unmask NAs to 0

var annual_modLSTcday_coll = annual_modLSTcday_coll.map(function(image) {
return image.unmask(0);
});

//Task 2

// Annual LST Night aggregation

// Return image in Celsius

var modLSTcnight = modLSTnight.map(kelvin2celsius);

// Map over the list of years to build a list of annual image composites.

var annual_modLSTcnight = years_list.map(function(year) {
return modLSTcnight
.filter(ee.Filter.calendarRange(year,year,'year'))
.reduce(ee.Reducer.mean())
.set('system:index', ee.String(year))
.set('year', year);
});

// Convert the image List to an ImageCollection.
var annual_modLSTcnight_coll = ee.ImageCollection.fromImages(annual_modLSTcnight);
// Unmask NAs to 0
var annual_modLSTcnight_coll = annual_modLSTcnight_coll.map(function(image) {
return image.unmask(0);
});

var mergeCollections = annual_modNDVI_coll.combine(annual_modLSTcday_coll).combine(annual_modLSTcnight_coll).filterBounds(Cartagena_geom);

mergeCollections = mergeCollections.map(function(image) {
var deltaLST = image.select('LST_Day_1km_mean').subtract(image.select('LST_Night_1km_mean'))
return image.addBands(deltaLST.rename('deltaLST'))
});

//Produce NDVI Change Graphics

var ndvi_chart = ui.Chart.image.series({
imageCollection: mergeCollections.select('NDVI_mean'),
region: Cartagena_geom,
reducer: ee.Reducer.mean(),
scale: 1000,
xProperty: 'system:index'})
.setOptions({
title: 'Time Series for Annual Summertime NDVI',
vAxis: {title: 'NDVI'}});
print(ndvi_chart);

//Produce Annual LST Day Time Series Chart

var modLSTcday_chart = ui.Chart.image.series({
imageCollection: mergeCollections.select('LST_Day_1km_mean'),
region: Cartagena_geom,
reducer: ee.Reducer.mean(),
scale: 1000,
xProperty: 'system:index'})
.setOptions({
title: 'Time Series for Annual Summertime Land Surface Temperature During Day Time',
vAxis: {title: 'Celsius'}});
print(modLSTcday_chart)

//Produce Annual LST Night Time Series Chart

var modLSTcnight_chart = ui.Chart.image.series({
imageCollection: mergeCollections.select('LST_Night_1km_mean'),
region: Cartagena_geom,
reducer: ee.Reducer.mean(),
scale: 1000,
xProperty: 'system:index'})
.setOptions({
title: 'Time Series for Annual Summertime Land Surface Temperature During Night Time',
vAxis: {title: 'Celsius'}});
print(modLSTcnight_chart)

//Produce Annual LST delta Time Series Chart

var modLSTcdelta_chart = ui.Chart.image.series({
imageCollection: mergeCollections.select('deltaLST'),
region: Cartagena_geom,
reducer: ee.Reducer.mean(),
scale: 1000,
xProperty: 'system:index'})
.setOptions({
title: 'Time Series for Annual Summertime Land Surface Temperature Delta Day - Night',
vAxis: {title: 'Celcius'}});
print(modLSTcdelta_chart)

// plot NDVI

var visParams = {
min: -2000,
max: 9000.0,
palette:[
'FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718', '74A901','66A000', '529400', '3E8601', '207401', '056201', '004C00', '023B01',
'012E01', '011D01', '011301'
],
};

var period_modNDVI = mergeCollections.select('NDVI_mean').max();

Map.addLayer(period_modNDVI.clip(Cartagena_geom),visParams,'2002-2019 period Max NDVI Summertime');


// Add clipped image layer to the map.

var viz = {
min: 0, max: 40,
palette: ['blue', 'limegreen', 'yellow', 'darkorange', 'red']};
var period_modLSTcday = mergeCollections.select('LST_Day_1km_mean').max();
var period_modLSTcnight = mergeCollections.select('LST_Night_1km_mean').max();
var period_modLSTcdelta = mergeCollections.select('deltaLST').max();
Map.addLayer(period_modLSTcday.clip(Cartagena_geom),viz,'Period Max Heat Summertime During Day Time in Celsius');
Map.addLayer(period_modLSTcnight.clip(Cartagena_geom),viz,'Period Max Heat Summertime During Night Time in Celsius');
Map.addLayer(period_modLSTcdelta.clip(Cartagena_geom),viz,'Period Max Heat Summertime Delta Day - Night in Celsius');

// Check by a given year
var targetyear = 2019
var targetimage = mergeCollections
.filterMetadata('year', 'equals', targetyear)
.first()
var image = targetimage.reduceRegion(ee.Reducer.toList(), Cartagena_geom, 1000)
var x = image.get('NDVI_mean');
var y = image.get('deltaLST');
var chart = ui.Chart.array.values(y, 0, x);
chart = chart.setSeriesNames(['NDVI-LST observation']);
chart = chart.setOptions({
title: 'ScatterPlot NDVI vs Delta LST in ' + targetyear,
hAxis: {
title: 'NDVI',
viewWindow: {
min: 0,
max: 10000
}
},
vAxis: {
title: 'Delta LST (Celsius)',
viewWindow: {
min: 0,
max: 20
}
},
pointSize: 3,
});
print(chart);

//Study LST and NDVI by Land cover

var MCD12Q1_coll = ee.ImageCollection("MODIS/006/MCD12Q1")
.filter(year_filter)
.select('LC_Prop2')
.filterBounds(Cartagena_geom)

var annual_MCD12Q1_coll = years_list.map(function(year) {
return MCD12Q1_coll
.filter(ee.Filter.calendarRange(year,year,'year'))
.first()
.set('system:index', ee.String(year))
.set('year', year)
});

var finalColl = mergeCollections.combine(annual_MCD12Q1_coll)
var targetimage = finalColl
.filterMetadata('year', 'equals', targetyear)
.first()
// create samples

var targetmap = targetimage.select('LC_Prop2').addBands(ee.Image.pixelLonLat())

var targetmap = targetmap.rename(["class","longitude", "latitude"]).cast({"class": "int8"})
//training
var samples = targetmap.stratifiedSample({numPoints: 100, classBand: "class", region: Cartagena_geom, seed: 2, dropNulls: true, scale: 1000})
// Convert lat long points to geometry object:
var samples = samples.map(function(samples){
var long = samples.get("longitude");
var lat = samples.get("latitude");
var geom = ee.Algorithms.GeometryConstructors.Point([long, lat]);
return samples.setGeometry(geom);
})
//generate group chart
var sampleFC = targetimage.sampleRegions({
collection: samples,
scale: 1000
});
// Sample size
print(sampleFC.size())
print(sampleFC.distinct(['class']).aggregate_array('class'))

// Chart

var title='Relationship between NDVI and Delta LST by land cover type';
var xAxisTitle='NDVI';
var yAxisTitle='Delta LST (Celsius)';
var chartSetting = {
title: title,
hAxis: {'title': xAxisTitle, 'minValue': 0, 'maxValue': 10000, 'viewWindow': {'max': 10000}},
vAxis: {'title': yAxisTitle, 'minValue': 0, 'maxValue': 20, 'viewWindow': {'max': 20}},
pointSize: 3
};

// Create the chart.

var chart = ui.Chart.feature.groups(sampleFC, 'NDVI_mean', 'deltaLST', 'LC_Prop2')
.setChartType('ScatterChart')
.setOptions(chartSetting)
print(chart)

// import ASTER Collection and filter over London

var aster_collection = ee.ImageCollection("ASTER/AST_L1T_003")
.filterDate('2000-01-01', '2020-01-01')
.filterBounds(Cartagena_geom)
.select('B13');
//print(aster_collection);
// maximum of pixel values
var aster_dn = aster_collection.max();
//print(aster_dn);
// histogram of aster_dn to determine sensible min/max range for plotting
var hist = ui.Chart.image.histogram(aster_dn, Cartagena_geom, 300);
//print(hist);
// visualise
Map.addLayer(aster_dn.clip(Cartagena_geom), {bands: ['B13'], min: 1600, max: 1950}, 'ASTER_DN');

var aster_sr = aster_dn.expression(
'(B13 - 1) * 0.005693', {
B13:aster_dn.select('B13')
});

// step (1): calculate the part of the denominator within the brackets

var aster_bt = aster_sr.expression(
'K1 / B13 + 1', {
B13:aster_sr.select('B13'),
K1:ee.Number(866.468575)
});

// step (2): take natural logarithm of the output of step (1)
var aster_bt = aster_bt.log();
// step (3): divide K2 by the denominator calculated in step (2)
var aster_bt = aster_bt.expression(
'K2 / image', {
image:aster_bt.select('constant'),
K2:ee.Number(1350.069147)
});

// histogram aster_bt to determine the min/max for plotting
var hist = ui.Chart.image.histogram(aster_bt, Cartagena_geom, 300);
print(hist);
// visualise
Map.addLayer(aster_bt.clip(Cartagena_geom), {bands: ['constant'], min: 295, max: 310}, 'BT');
